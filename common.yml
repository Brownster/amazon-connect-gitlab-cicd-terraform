.aws_assume_role:
  id_tokens:
    MY_OIDC_TOKEN:
      aud: https://gitlab.example.com
  before_script: >
    if [[ $OIDC == true ]]; then
      yum install -y aws-cli
      mkdir -p ~/.aws
      echo "${MY_OIDC_TOKEN}" > /tmp/web_identity_token
      echo -e "[profile oidc]\nrole_arn=${DEVOPS_ROLE_ARN}\nweb_identity_token_file=/tmp/web_identity_token" > ~/.aws/config
      export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
          $(aws sts assume-role \
            --role-arn "${AWS_CREDS_TARGET_ROLE}" \
            --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}" \
            --duration-seconds 3600 \
            --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
            --output text))
      aws sts get-caller-identity
    else
      echo ">> OIDC=false"
      echo ">> Installing AWS CLI" && yum install -y aws-cli
      echo ">> Exporting creds into environment" && eval "$(aws configure export-credentials --format env)"
    fi

.setup:
  script:
    - pwd
    - yum install -y yum-utils idn2 diffutils jq unzip findutils
    - yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
    - yum install -y terraform
    - cp gitlab-terraform-setup/bin/gitlab-terraform.sh /usr/bin/gitlab-terraform
    - chmod +x /usr/bin/gitlab-terraform

.rules:
  # This section is uncommented if you wish to run Gitlab runners in codebuild (presuming the codebuild project has been created as described in README)..
  # tags:
  #   - codebuild-<<YOUR CODEBUILD PROJECT HERE>>-$CI_PROJECT_ID-$CI_PIPELINE_IID-$CI_JOB_NAME
  environment: "${DEPLOYMENT_ENV_NAME}"
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      variables:
        DEPLOYMENT_ENV_NAME: dev
    - if: $CI_COMMIT_BRANCH == "stage"
      variables:
        DEPLOYMENT_ENV_NAME: stg
    - if: $CI_COMMIT_BRANCH == "main"
      variables:
        DEPLOYMENT_ENV_NAME: prod
    - when: never
    - allow_failure: false
  parallel:
    matrix:
      - TF_VAR_region: ["us-east-1"]

tflint:
  allow_failure: true
  variables:
    GL_ASDF_TFLINT_VERSION: "0.53.0"
    GL_ASDF_TERRAFORM_VERSION: "1.9.7"
  stage: validate
  needs: []
  # tags:
  #   - codebuild-<<YOUR CODEBUILD PROJECT HERE>>-$CI_PROJECT_ID-$CI_PIPELINE_IID-$CI_JOB_NAME
  script:
    - !reference [.setup, script]
    - curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
    - rm -rf "tflint-reports/"
    - mkdir -p "tflint-reports/"
    - cd $TF_ROOT && pwd
    # Find all TF files and lint the directories of those files
    - tflint --init -c ../../.tflint.hcl

    - |
      find_tf_modules() {
        (
          # First try finding only root modules, using presence of
          # .terraform.lock.hcl as a signal
          find . -type f -name '.terraform.lock.hcl' | grep -vE "${COMMON_TASK_VALIDATIONS_EXCLUDES_REGEXP:-__ignored__}" | sed -e 's#/[^/]*$##' | sort -u | grep -v "${TFLINT_EXCLUDE_REGEX:-__ignored__}"
        ) || (
          # If that fails, search for any tf resources
          find . -type f -name '*.tf' | grep -vE "${COMMON_TASK_VALIDATIONS_EXCLUDES_REGEXP:-__ignored__}" | sed -e 's#/[^/]*$##' | sort -u | grep -v "${TFLINT_EXCLUDE_REGEX:-__ignored__}"
        )
      }

      # Loop through all the directories containing *.tf files and run tflint in them
      find_tf_modules | while read -r dir; do
        junit_file="$(echo "$dir"|sed -r 's/[^a-zA-Z0-9]+/-/g' | sed -r s/^-+\|-+$//g).xml";
        echo "${dir} -------------------------------------------------------";

        opt_lockfile="-lockfile=readonly"
        if [ ! -e "${dir}/.terraform.lock.hcl" ]; then
          yellow="$(printf '\033[1;33m')"
          reset="$(printf '\033[0m')"
          echo "${yellow}⚠️  There is no \".terraform.lock.hcl\" file in \"${dir}\". The best practice is to commit this file to Git.${reset}"
          opt_lockfile=""
        fi

        terraform -chdir="${dir}" init ${opt_lockfile} -backend=false

        tflint -c "${CI_PROJECT_DIR}/.tflint.hcl" --chdir="${dir}" --call-module-type=all -f compact || echo "${dir}" >> "${CI_PROJECT_DIR}/tflint-reports/failed";
        tflint -c "${CI_PROJECT_DIR}/.tflint.hcl" --chdir="${dir}" --call-module-type=all -f junit > "${CI_PROJECT_DIR}/tflint-reports/${junit_file}" || true;
      done;
    # tflint-reports/failed indicates a linter failure
    - if [ -f "${CI_PROJECT_DIR}/tflint-reports/failed" ]; then
      echo "Failures found in:";
      cat "${CI_PROJECT_DIR}/tflint-reports/failed";
      exit 1;
      fi
  after_script: |
    cat <<-EOD
    ----------------------------------------------------------
    Need help? Documentation on the tflint CI job can be found at:
    https://gitlab.com/gitlab-com/gl-infra/common-ci-tasks/-/blob/main/tflint.md
    EOD
  artifacts:
    when: always
    reports:
      junit: tflint-reports/*.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != "schedule"
